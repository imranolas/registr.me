- model_class = Klass
.page-header
  %h1 Class #{@klass.name}

%p
  %strong= model_class.human_attribute_name(:teacher_id) + ':'
  = @klass.teacher.name
%p
  %strong= 'Attendance required' + ':'
  #{@klass.attendance}%
#canvas-container
  %canvas#myChart{height: 100, width: 100}

.form-actions
  = link_to t('.back', :default => t("helpers.links.back")), klasses_path, :class => 'btn btn-primary'
  = link_to t('.edit', :default => t("helpers.links.edit")), edit_klass_path(@klass), :class => 'btn btn-primary'
  = link_to t('.destroy', :default => t("helpers.links.destroy")), klass_path(@klass), :method => "delete", :data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) }, :class => 'btn btn-danger'

%ul.nav.nav-tabs#Tabs
  %li.active
    %a{ href: "#lessons", 'data-toggle' => "tab" } Lessons
  %li
    %a{ href: "#students", 'data-toggle' => "tab" } Students

/  Tab panes 
.tab-content
  / Home tab
  .tab-pane.fade.in.active#lessons
    = render partial: 'shared/lesson_table', locals: {lessons: @klass.lessons}

  .tab-pane.fade#students
    - model_class = Student
    %table.table.table-striped
      %thead
        %tr
          %th= model_class.human_attribute_name(:id)
          %th= model_class.human_attribute_name(:name)
          %th= model_class.human_attribute_name(:active)
          %th Classes
      %tbody
        - @klass.students.each do |student|
          %tr
            %td= link_to student.id, student_path(student)
            %td= student.name
            %td
              - if student.active
                = raw("<span class='input-icon fui-check-inverted'></span>")
              - else
                = raw("<span class='input-icon fui-cross-inverted'></span>")
            %td
              %span.badge= student.klasses.count 



:javascript
  var lineChartData = #{@klass.lessons_hash_for_charts.to_json}


  //Get the canvas & context
    var c = $('#myChart');
    var ct = c.get(0).getContext('2d');
    var container = $(c).parent();

    //Run function when browser resizes
    $(window).resize( respondCanvas );

    function respondCanvas(){ 
        c.attr('width', $(container).width() ); //max width
        c.attr('height', $(container).height() ); //max height

        new Chart(document.getElementById("myChart").getContext("2d")).Line(lineChartData,{
          bezierCurve : false,
          scaleOverride : true,
          scaleSteps : #{@klass.students.count},
          scaleStepWidth : 1,
          scaleStartValue : 0
        });

        //Call a function to redraw other content (texts, images etc)
    }

    //Initial call 
    respondCanvas();
